{
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@@james.seril.12",
    "title": "Stories by James Seril  on Medium",
    "link": "https://medium.com/@james.seril.12?source=rss-81264f85bbc9------2",
    "author": "",
    "description": "Stories by James Seril  on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*tsBvT6lM4OukHWmkzhUMtA.jpeg"
  },
  "items": [
    {
      "title": "Hack The Box\u200a\u2014\u200aUniversity CTF 2024: Binary Badlands (Armaxis)",
      "pubDate": "2024-12-16 15:28:42",
      "link": "https://medium.com/@james.seril.12/hack-the-box-university-ctf-2024-binary-badlands-armaxis-226dd5f2fc96?source=rss-81264f85bbc9------2",
      "guid": "https://medium.com/p/226dd5f2fc96",
      "author": "James Seril",
      "thumbnail": "",
      "description": "\n<h3>\n<strong>Hack The Box\u200a\u2014\u200aUniversity CTF 2024: Binary Badlands</strong> <strong>(Armaxis)</strong>\n</h3>\n<p>Participating in my first Capture The Flag (CTF) competition has been an exciting and rewarding experience. As someone eager to deepen my understanding of cybersecurity concepts, this hands-on challenge provided a unique opportunity to apply my knowledge in a practical setting. From problem-solving to learning new techniques, the experience not only enhanced my skills but also gave me valuable insights into real-world cybersecurity scenarios.</p>\n<p><strong>Details:</strong><br>Web Exploitation</p>\n<p><strong>Armaxis<br></strong>In the depths of the Frontier, Armaxis powers the enemy\u2019s dominance, dispatching weapons to crush rebellion. Fortified and hidden, it controls vital supply chains. Yet, a flaw whispers of opportunity, a crack to expose its secrets and disrupt their plans. Can you breach Armaxis and turn its power against\u00a0tyranny?</p>\n<h3>Solution</h3>\n<p>In this challenge, we need to exploit the website of Armaxis, identify potential vulnerabilities, capture the flag, and uncover its\u00a0secrets.</p>\n<p>First, I examined the source code of the provided website. I focused on understanding how the login and signup functionalities interact with the database. Here\u2019s what I discovered:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/0*2I6v5AUhkIRYHDQM\"></figure><p>Based on this code, I was able to identify the admin\u2019s credentials, but I still needed to obtain their password. I attempted to access the admin account using SQL injection, but the attempt was unsuccessful. I also tried intercepting the website traffic with Burp Suite and modifying the role to \u201cadmin,\u201d but this approach did not work\u00a0either.</p>\n<p>Next, I attempted to reset the admin\u2019s password. During this process, I noticed that a token code was generated for resetting the password.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qzU2WhMRpL8WHNHw\"></figure><p>Upon inspecting the token through the BurpSuite Intercept, I realized it was a<strong> JSON Web Token (JWT)</strong>. I tried intercepting the token and modifying it by changing the role from <strong>\u201cuser\u201d</strong> to <strong>\u201cadmin.\u201d</strong> However, when I submitted the modified token and attempted to create a new password, I was redirected to an <strong>\u201cInvalid Token\u201d</strong>\u00a0page.</p>\n<p>Another website was provided as part of the challenge, so I decided to investigate it. This led me to a new\u00a0page:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-L9-pjeQojw5MwBP\"></figure><p>I considered creating an account with the email address provided on this page and then attempting to elevate its role to \u201cadmin,\u201d but this approach also failed. However, from the source code, I discovered that the reset tokens were valid for one hour. This gave me an idea: perhaps I could use the token sent to <strong>test@email.htb</strong> and apply it to the <strong>admin@armaxis.htb</strong> account.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/0*grJG2LdD0Rsh-SU0\"></figure><p>After creating a new account, I quickly attempted to change the password to capture the token. Sure enough, the system sent a reset token to the <strong>\u201ctest\u00a0email.\u201d</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zVYjkGgOTNTPmsSl\"></figure><p>I then logged back into the system, initiated another password reset, and entered the admin credentials along with the token I intercepted from the email. Then the password reset was successful!</p>\n<p>The first vulnerability we uncovered was related to <strong>JWT Token Generation</strong>, as the application generated identical tokens for resetting passwords.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EEq5SYVX1_c2_tyF\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*T182uGu5NbQs_pQH\"></figure><p>After successfully logging in as the admin, I navigated to the \u201cDispatch\u201d page. There, I found a form labeled <strong>\u201cNote (Markdown)\u201d</strong> which hinted at a potential exploitation vector. Additionally, a script file, <strong><em>markdown.js</em></strong>, was present, further confirming the possibility of a Markdown-based vulnerability.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qo-I01DhSBqHwBG_\"></figure><p>While exploring potential exploits, my friend <a href=\"https://medium.com/u/a0d4d2305364\">Xeipher</a>, identified a way to exploit server-side command injection vulnerabilities. These vulnerabilities occur when the application improperly sanitizes input during Markdown processing, particularly with image elements.</p>\n<p>We crafted a payload to exploit this vulnerability. The payload was designed to execute a command to locate a file named <strong>\u201cflag\u201d</strong> on the server. The injection code was as\u00a0follows:</p>\n<blockquote>![exploit](http://example.com; find / -type f -name \u201cflag\u201d 2&gt;/dev/null)</blockquote>\n<p>The explanation for this exploit is that<br><strong>find / -type f -name\u00a0\u201cflag\u201d</strong>:</p>\n<ul><li>Searches the entire filesystem (/) for a file named\u00a0\u201cflag\u201d</li></ul>\n<p><strong>2&gt;/dev/null</strong>:</p>\n<ul><li>Redirects error messages (stderr) to /dev/null to suppress them. This keeps the output clean and avoids disclosing unnecessary errors that might alert the\u00a0target.</li></ul>\n<p>By injecting this payload, we aimed to exploit the Markdown processor to execute the command on the\u00a0server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2cAXR2UdSXtzZzmj\"></figure><p>I dispatched it to the admin email so that I would not need to logout. After I \u201cDispatche Weapon\u201d, I will open up the View Source by right clicking it and opening the image\u00a0soruce</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*798qYO5YkK3ZVPb4YGfO-g.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ewpBXE7F5AnmfAFC\"></figure><p>Then I will enter the following command again to show the\u00a0flag</p>\n<p>The exploit targets a <strong>server-side command injection vulnerability</strong> in the Markdown processor of the application. When a Markdown image is rendered, the processor fails to sanitize the input properly, allowing malicious commands to be executed on the\u00a0server.</p>\n<blockquote>![exploit](http://example.com; cat /path/to/flag.txt)</blockquote>\n<p>injects a command (cat /path/to/flag.txt) after the semicolon (;), which the server interprets as a separate shell command. This command reads the contents of the flag.txt file, effectively exposing sensitive data.</p>\n<p>By embedding the payload in the Markdown form, the vulnerability was exploited to retrieve the\u00a0flag.</p>\n<p>Then the flag was displayed in the View Source command and captured\u00a0it</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xEIzayTzryo4i1-G\"></figure><p><strong>FLAG:</strong> HTB{l00k0ut_f0r_m4rkd0wn_LF1_1n_w1ld!_760cfa55ee5e44c5640050b7076876d3}</p>\n<h3><strong>Conclusion:</strong></h3>\n<p>I want to thank my friend <a href=\"https://medium.com/u/a0d4d2305364\">Xeipher</a> for discovering the <strong>server-side command injection vulnerability </strong>in the markdown page when \u201cdispatching the\u00a0weapons\u201d</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=226dd5f2fc96\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<h3>\n<strong>Hack The Box\u200a\u2014\u200aUniversity CTF 2024: Binary Badlands</strong> <strong>(Armaxis)</strong>\n</h3>\n<p>Participating in my first Capture The Flag (CTF) competition has been an exciting and rewarding experience. As someone eager to deepen my understanding of cybersecurity concepts, this hands-on challenge provided a unique opportunity to apply my knowledge in a practical setting. From problem-solving to learning new techniques, the experience not only enhanced my skills but also gave me valuable insights into real-world cybersecurity scenarios.</p>\n<p><strong>Details:</strong><br>Web Exploitation</p>\n<p><strong>Armaxis<br></strong>In the depths of the Frontier, Armaxis powers the enemy\u2019s dominance, dispatching weapons to crush rebellion. Fortified and hidden, it controls vital supply chains. Yet, a flaw whispers of opportunity, a crack to expose its secrets and disrupt their plans. Can you breach Armaxis and turn its power against\u00a0tyranny?</p>\n<h3>Solution</h3>\n<p>In this challenge, we need to exploit the website of Armaxis, identify potential vulnerabilities, capture the flag, and uncover its\u00a0secrets.</p>\n<p>First, I examined the source code of the provided website. I focused on understanding how the login and signup functionalities interact with the database. Here\u2019s what I discovered:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/0*2I6v5AUhkIRYHDQM\"></figure><p>Based on this code, I was able to identify the admin\u2019s credentials, but I still needed to obtain their password. I attempted to access the admin account using SQL injection, but the attempt was unsuccessful. I also tried intercepting the website traffic with Burp Suite and modifying the role to \u201cadmin,\u201d but this approach did not work\u00a0either.</p>\n<p>Next, I attempted to reset the admin\u2019s password. During this process, I noticed that a token code was generated for resetting the password.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qzU2WhMRpL8WHNHw\"></figure><p>Upon inspecting the token through the BurpSuite Intercept, I realized it was a<strong> JSON Web Token (JWT)</strong>. I tried intercepting the token and modifying it by changing the role from <strong>\u201cuser\u201d</strong> to <strong>\u201cadmin.\u201d</strong> However, when I submitted the modified token and attempted to create a new password, I was redirected to an <strong>\u201cInvalid Token\u201d</strong>\u00a0page.</p>\n<p>Another website was provided as part of the challenge, so I decided to investigate it. This led me to a new\u00a0page:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-L9-pjeQojw5MwBP\"></figure><p>I considered creating an account with the email address provided on this page and then attempting to elevate its role to \u201cadmin,\u201d but this approach also failed. However, from the source code, I discovered that the reset tokens were valid for one hour. This gave me an idea: perhaps I could use the token sent to <strong>test@email.htb</strong> and apply it to the <strong>admin@armaxis.htb</strong> account.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/0*grJG2LdD0Rsh-SU0\"></figure><p>After creating a new account, I quickly attempted to change the password to capture the token. Sure enough, the system sent a reset token to the <strong>\u201ctest\u00a0email.\u201d</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zVYjkGgOTNTPmsSl\"></figure><p>I then logged back into the system, initiated another password reset, and entered the admin credentials along with the token I intercepted from the email. Then the password reset was successful!</p>\n<p>The first vulnerability we uncovered was related to <strong>JWT Token Generation</strong>, as the application generated identical tokens for resetting passwords.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EEq5SYVX1_c2_tyF\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*T182uGu5NbQs_pQH\"></figure><p>After successfully logging in as the admin, I navigated to the \u201cDispatch\u201d page. There, I found a form labeled <strong>\u201cNote (Markdown)\u201d</strong> which hinted at a potential exploitation vector. Additionally, a script file, <strong><em>markdown.js</em></strong>, was present, further confirming the possibility of a Markdown-based vulnerability.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qo-I01DhSBqHwBG_\"></figure><p>While exploring potential exploits, my friend <a href=\"https://medium.com/u/a0d4d2305364\">Xeipher</a>, identified a way to exploit server-side command injection vulnerabilities. These vulnerabilities occur when the application improperly sanitizes input during Markdown processing, particularly with image elements.</p>\n<p>We crafted a payload to exploit this vulnerability. The payload was designed to execute a command to locate a file named <strong>\u201cflag\u201d</strong> on the server. The injection code was as\u00a0follows:</p>\n<blockquote>![exploit](http://example.com; find / -type f -name \u201cflag\u201d 2&gt;/dev/null)</blockquote>\n<p>The explanation for this exploit is that<br><strong>find / -type f -name\u00a0\u201cflag\u201d</strong>:</p>\n<ul><li>Searches the entire filesystem (/) for a file named\u00a0\u201cflag\u201d</li></ul>\n<p><strong>2&gt;/dev/null</strong>:</p>\n<ul><li>Redirects error messages (stderr) to /dev/null to suppress them. This keeps the output clean and avoids disclosing unnecessary errors that might alert the\u00a0target.</li></ul>\n<p>By injecting this payload, we aimed to exploit the Markdown processor to execute the command on the\u00a0server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2cAXR2UdSXtzZzmj\"></figure><p>I dispatched it to the admin email so that I would not need to logout. After I \u201cDispatche Weapon\u201d, I will open up the View Source by right clicking it and opening the image\u00a0soruce</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*798qYO5YkK3ZVPb4YGfO-g.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ewpBXE7F5AnmfAFC\"></figure><p>Then I will enter the following command again to show the\u00a0flag</p>\n<p>The exploit targets a <strong>server-side command injection vulnerability</strong> in the Markdown processor of the application. When a Markdown image is rendered, the processor fails to sanitize the input properly, allowing malicious commands to be executed on the\u00a0server.</p>\n<blockquote>![exploit](http://example.com; cat /path/to/flag.txt)</blockquote>\n<p>injects a command (cat /path/to/flag.txt) after the semicolon (;), which the server interprets as a separate shell command. This command reads the contents of the flag.txt file, effectively exposing sensitive data.</p>\n<p>By embedding the payload in the Markdown form, the vulnerability was exploited to retrieve the\u00a0flag.</p>\n<p>Then the flag was displayed in the View Source command and captured\u00a0it</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xEIzayTzryo4i1-G\"></figure><p><strong>FLAG:</strong> HTB{l00k0ut_f0r_m4rkd0wn_LF1_1n_w1ld!_760cfa55ee5e44c5640050b7076876d3}</p>\n<h3><strong>Conclusion:</strong></h3>\n<p>I want to thank my friend <a href=\"https://medium.com/u/a0d4d2305364\">Xeipher</a> for discovering the <strong>server-side command injection vulnerability </strong>in the markdown page when \u201cdispatching the\u00a0weapons\u201d</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=226dd5f2fc96\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": [
        "competition",
        "cybersecurity",
        "web-exploitation",
        "capture-the-flag",
        "hackthebox"
      ]
    }
  ]
}
